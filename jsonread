import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class JsonParser {
    public static void main(String[] args) {
        // Specify the path to your JSON file
        String filePath = "path/to/your/json/file.json";
        String key = "your_key";

        try {
            // Read the JSON file
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode rootNode = objectMapper.readTree(new File(filePath));

            // Find all values by the specified key
            List<String> values = new ArrayList<>();
            findValuesByKey(rootNode, key, values);

            // Print the values
            for (String value : values) {
                System.out.println(value);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void findValuesByKey(JsonNode node, String key, List<String> values) {
        // Base case: if the current node is an object
        if (node.isObject()) {
            Iterator<String> fieldNames = node.fieldNames();
            while (fieldNames.hasNext()) {
                String fieldName = fieldNames.next();
                JsonNode childNode = node.get(fieldName);
                // Recursively search for values in the child nodes
                findValuesByKey(childNode, key, values);
            }
        }
        // Base case: if the current node is an array
        else if (node.isArray()) {
            for (JsonNode childNode : node) {
                // Recursively search for values in the child nodes
                findValuesByKey(childNode, key, values);
            }
        }
        // Base case: if the current node is a value
        else if (node.isValueNode()) {
            if (node.has(key)) {
                JsonNode valueNode = node.get(key);
                values.add(valueNode.asText());
            }
        }
    }
}
